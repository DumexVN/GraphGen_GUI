#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include "mainwindow.h"
#include "ui_mainwindow.h"

#include <QCoreApplication>
#include <QGraphicsView>
#include <QPainter>
#include <QInputDialog>
#include <QtCore>
#include <QTimer>

#include "vertex.h"
#include "edge.h"
#include "graphgenerator.h"
#include "lineanimator.h"

class InfoWidget;

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow();

private slots:// private slot functions
    void generateArtificialSocialNetwork();
    void generateErdosReyni();
    void generateKarateClub();
    void generateWeightedKarateClub();
    void generateSimpleSample();
    void read_seperated_graph_input();
    void parseGMLfile();
    void draw_aggregation_result();
    void draw_dense_graph_aggregation_result();
    void draw_aggregation_retain_vertex_result();
    //aggregation
    void random_aggregate();
    void random_aggregate_with_degree_comparison();
    void random_aggregate_with_weight_comparison();
    void random_aggregate_with_neighbour_initial_degree_bias();
    void random_aggregate_with_highest_edge_weight_and_weight_comparison();
    void random_aggregate_with_edge_weight_bias_and_weight_comparison();
    void random_aggregate_with_highest_triangulated_vertex();
    //agg without 'removing' vertices
    void random_aggregate_retain_vertex_using_triangulation();
    void random_aggregate_retain_vertex_using_triangulation_times_weight();

    //
    void compareResultWithKarateClubData();

    //test with multiple runs
    void multirun_aggregate();
    void multirun_aggregate_edge_weight_graph();


private:
    //random aggregation with weight update
    void typeII_with_weight_update();
    void typeII_probabilistic_current_degree_uniform_neighbour();
    void typeII_probabilistic_degree_probabilistic_neighbour();
    void typeIII_with_weight_update();
    void typeIII_probabilistic_with_weight_update();
    void typeIV_with_weight_update();
    void typeV_with_weight_update();
    void typeVI_with_weight_update();
    void typeVII_with_weight_update();
    void typeVIII_with_weight_update();
    //create Actions and Menu
    void setVertexDetails();
    void setEdgeWeight();
    void writeDetailRun(int type);
    bool checkGraphCondition();
    void createActions();
    void createMenus();
    void setUpGraphInfoWidget();
    void createSeperateScene();
    void reConnectGraph();
    void resetGraphics();
    void saveAggregationResultInSeperateWindow();
    QPair<int,int> compareResultWithKarateClubDataStats();
    QPair<int,int> persistentGraphCompareWithKarate();

    //

    QSequentialAnimationGroup * prepare_animation_for_one_vertex(QList<int> edges, Vertex * abs_v, Vertex * absorber);
    void draw_aggregation_animation();
    void layout_KarateClub();
    void layout_graph(NormalGraph &G);
    void layout_artificial_network(NormalGraph &G, int no_cluster);
    void preserveVertexPointer();


    //private variables
    NormalGraph myGraph;
    QList<QPointF> originVertexPos;
    QList<Vertex*> myVertexList;
    QList<Edge*> myEdgeList;
    QList<LineAnimator*> myLine;
    QList<Vertex*> centroids;
    QList<Vertex*> cluster_vertex;
    QList<QString> vertex_label;
    QList<int> vertex_weight;
    QList<int> edge_weight;
    QList<QPair<int,int> > hierarchy;
    QGraphicsScene *myScene;
    QGraphicsView *myView;
    QMainWindow * originGraph;
    bool graphIsReady;

    //all menus
    QMenu *generateGraphMenu;
    QMenu *aggregateMenu;
    InfoWidget * myInfoWidget;

    //all actions
    QAction *generateArtificialSocialNetworkAction;
    QAction *generateErdosReyniAction;
    QAction *generateKarateClubAction;
    QAction *generateWeightedKarateClubAction;
    QAction *generateSmallSampleAction;
    QAction *readInputAction;
    QAction *readGMLFileAction;
    QAction *comparesKarateClubResultAction;
    QAction *randomAggregateAction;
    QAction *randomAggregateWithInitialDegreeBiasAction;
    QAction *randomAggregationWithDegreeComparisonAction;
    QAction *randomAggregationWithWeightComparisonAction;
    QAction *randomAggregationSelectHighestEdgeWeightWithVertexWeightComparisonAction;
    QAction *randomAggregationWithEdgeWeightBiasAndVertexWeightComparisonAction;
    QAction *randomAggregationWithHighestTriangulatedVertexAndWeightComparisonAction;

    QAction *randomAggregationRetainingVertexWithTriangulationCoeffAndWeightComparisonAction;
    QAction *randomAggregationRetainingVertexWithTriangulationxWeightIndexAction;
    //multiple test
    QAction *multipleAggregateAction;
    QAction *multipleAggregateEdgeWeightedGraphAction;
};

#endif // MAINWINDOW_H
